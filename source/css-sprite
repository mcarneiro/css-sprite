#!/bin/bash

# Author Marcelo Miranda Carneiro -- mcarneiro@fbiz.com.br | mcarneiro@gmail.com

set -o nounset
set -o errexit
set -o pipefail

B1="\033[1m";
B2="\033[0m";
ARGS=( "${@:-}" );
UPLOAD_URL='http://css.spritegen.com/api.php?upload';
CREATE_URL='http://css.spritegen.com/api.php?create';
FILE_LIST='';
INPUT_PATH=${1:-./};
OUTPUT='';
QUIET='';
CREATED_DATA='';
SESSION_ID='';
TO_SEND=();
TOTAL=0;
TOTAL_WARNS=0;
UPLOADED=0;
JPEG_QUALITY="75";
PADDING="2";
OUTPUT_TYPE="png";

help() {
	if [ "${ARGS[0]}" = "?" ]; then
		echo -e "
CSS Sprite v0.1.2 (last change Ter 20 Ago 2013 20:34:24 BRT)


${B1}AUTHOR${B2}
  Marcelo Miranda Carneiro - mcarneiro@gmail.com

${B1}INFO${B2} (release Thu Jul 26 15:10:13 BRT 2012)
  Generates a sprite via http://css.spritegen.com/ website and print out the CSS.

${B1}USAGE${B2}
  css-sprite FOLDER_PATH [-s, -o=OUTPUT_PATH, -padding=2, -output-type=png, -jpeg-quality=75]
  css-sprite ?

  ${B1}?${B2}              help page;
  ${B1}-s${B2}             silent mode. Only outputs the generated CSS on the stdout;
  ${B1}-o${B2}             output png file (optional). If nothing is passed, will use the folder
                 name and output at the same directory;
  ${B1}-padding${B2}       space between images on the sprite. By default it's 2 and max-value is 25;
  ${B1}-output-type${B2}   image format. By default it's png, can be jpg, gif and png;
  ${B1}-jpeg-quality${B2}  image quality from 0 to 100. By default it's 75;

  After the first run, a ${B1}sprite.config${B2} file will be created with the file
  list. It is possible to create a simple replace rule so the generated
  CSS classes doesn't need to follow the filenames. The rule for this
  file is something like:

  file-name.png=.new-css-rule:hover, .in-one-line
  file-name2.png
  file-name3.png=a.css-rule:hover

  When sprite.config exists, the script will ONLY use the listed files
  instead of listing through the folder.

${B1}EXAMPLES${B2}
  css-sprite ~/sprites/structure
  css-sprite ~/sprites/structure -s
  css-sprite ~/sprites/structure -s -padding=4
  css-sprite ~/sprites/structure -o=teste.png
  css-sprite ~/sprites/structure -s | pbcopy (to copy to clipboard)

${B1}LOG HISTORY${B2}
Check it at https://github.com/mcarneiro/css-sprite#log-history
";
		exit 1;
	fi
}
# FORMAT AND MESSAGES
getColorId() {
	# color [isbg=""]
	local BG=''
	local COLOR=''
	
	case "${1:-}" in
		'black'|0) COLOR='0' ;;
		'red'|1) COLOR='1' ;;
		'green'|2) COLOR='2' ;;
		'yellow'|3) COLOR='3' ;;
		'blue'|4) COLOR='4' ;;
		'purple'|5) COLOR='5' ;;
		'cyan'|6) COLOR='6' ;;
		'gray'|7) COLOR='7' ;;
	esac
	if [ "$COLOR" ]; then
		BG='3'
	fi
	if [ "${2:-}" -a "$COLOR" ]; then
		BG='4'
	fi
	echo "${BG}${COLOR}"
}
getStyleId() {
	# [style="none"]
	local STYLE=''
	
	case "${1:-}" in
		'bold'|1) STYLE='1' ;;
		'underscore'|4) STYLE='4' ;;
		'blink'|5) STYLE='5' ;;
		'reverse'|7) STYLE='7' ;;
		'concealed'|8) STYLE='8' ;;
		'none'|0|*) STYLE='' ;;
	esac
	echo "$STYLE"
}
getFormatCode() {
	# [color="white" style="none" bgcolor=""]
	local ATTR=(
		"`getColorId \"${3:-}\" 1`"\
		"`getColorId \"${1:-}\"`"\
		"`getStyleId \"${2:-}\"`"
	)
	local OPENTAG=''
	local CLOSETAG='\033[0m'
	local CURR=''
	local i
	# echo \${ATTR[@]}: ${ATTR[@]}
	for(( i=0; i<${#ATTR[@]}; i++ )); do
		CURR=${ATTR[i]}
		if [ -z "$OPENTAG" ]; then
			OPENTAG='\033['
		fi
		if [ -n "$CURR" ]; then
			OPENTAG="${OPENTAG};${CURR}"
		fi
	done
	if [ -n "$OPENTAG" ]; then
		OPENTAG="${OPENTAG}m"
	fi
	echo "${OPENTAG}{txt}$CLOSETAG"
}
format() {
	# text [color="white" style="none" bgcolor=""]
	TXT=`echo ${1:-}`
	echo -e `getFormatCode ${2:-} ${3:-} ${4:-} | awk -F '{txt}' -v t="$TXT" '{print$1't'$2}'`
}

# METHOD UTILITIES
getArg() {
	## get args in the format "-argname=value"
	# arg_name argument name;
	# bool if argument must only exists. eg.: command -arg instead of command -arg=1;
	# custom_args if undefined will use global arguments at ARG variable;
	local CURRARG=""
	local HASDASH=""
	local GETNEXTVALUE=""
	local a=""
	local CUSTOM_ARGS=( "${3:-}" )

	if [ -z "$CUSTOM_ARGS" ]; then
		CUSTOM_ARGS=( ${ARGS[@]} )
	fi

	HASDASH=`echo $1 | awk -F "^-+" '{print$2}'`
	if [[ -n "$HASDASH" ]]; then
		for(( i=0; i<${#CUSTOM_ARGS[@]}; i++ )); do
			a=${CUSTOM_ARGS[$i]}
			if [ "$a" == "$1" ]; then
				GETNEXTVALUE="1"
				if [ "${2:-}" == '1' ]; then
					CURRARG='1';
					break;
				fi
				continue;
			fi
			if [[ "$GETNEXTVALUE" == "1" ]]; then
				CURRARG=$a
				break;
			fi
		done
	else
		for(( i=0; i<${#CUSTOM_ARGS[@]}; i++ )); do
			a=${CUSTOM_ARGS[$i]}
			CURRARG=`echo $a | awk -F "$1=" '{print$2}'`
			if [ "$CURRARG" != "" ]; then
				break;
			fi
		done
	fi
	echo $CURRARG
}
ifempty() {
	# value value to be checked
	# default_value default value to be used in case $1 is empty
	[[ -z $1 ]] && echo $2 || echo $1;
}

# log stuff
QUIET=''
WARN=''
log() {
	# text [style]
	if [ -z "$QUIET" ]; then
		local COLOR
		local STYLE
		local MSG=' [LOG]'
		local TXT=${1:-}
		
		case "${2:-}" in
			'success')
				MSG=' [SUCCESS]'
				COLOR='green'
				STYLE='bold'
			;;
			'title')
				MSG=''
				COLOR='white'
				STYLE='bold'
				TXT=`echo $TXT | tr 'a-z' 'A-Z'`
			;;
			'warn')
				MSG=' [WARNING]'
				COLOR='yellow'
			;;
		esac
		
		if [[ -n "$TXT" ]]; then
			MSG="$MSG $TXT"
		else
			MSG=''
		fi
		format "$MSG" "$COLOR" "$STYLE"
	fi
}
warn() {
	# text
	WARN="1"
	log "${1:-}" "warn"
}
success() {
	# text
	log "${1:-}" "success"
}
title() {
	# text
	log "${1:-}" "title"
}
finish() {
	log
	if [ -n "$WARN" ]; then
		warn "FINISHED with some warnings."
	else
		success "FINISHED!"
	fi
	log
}

# arguments
verifyArgumens() {
	OUTPUT="`getArg o`";
	QUIET="`getArg -s 1`";
	
	# set css sprite service options
	JPEG_QUALITY=$(ifempty "`getArg jpeg-quality`" "${JPEG_QUALITY}");
	PADDING=$(ifempty "`getArg padding`" "${PADDING}");
	OUTPUT_TYPE=$(ifempty "`getArg output-type`" "${OUTPUT_TYPE}");

	# input path
	if [ -n "`echo $INPUT_PATH | awk -F '/' '{print$(NF)}'`" ]; then
		INPUT_PATH="$INPUT_PATH/";
	fi;

	# check and create sprite.config
	if [ -d $INPUT_PATH ]; then
		CONFIG_FILE="${INPUT_PATH}sprite.config";
		if [ ! -f $CONFIG_FILE ]; then
			ls -l $INPUT_PATH | grep -E "(jpg|jpeg|gif|png)" | awk '{print$(NF)}' | sort -r > $CONFIG_FILE;
		fi
	fi

	getConfig $CONFIG_FILE;
	
	# check and set output path
	if [ -z "$OUTPUT" ]; then
		OUTPUT="../`basename "$INPUT_PATH"`.$OUTPUT_TYPE";
	fi
}
getConfig() {
	local CUSTOM_ARGS
	if [ -f "${1:-}" ]; then
		FILE_LIST=`cat ${1:-} | sort -ur`;
	fi
}
getSessionID() {
	SESSION_ID="`curl -si $UPLOAD_URL | grep "PHPSESSID=" | awk -F 'PHPSESSID=' '{print$2}' | awk -F '; path=' '{print$1}'`"
}

upload() {
	if [ -f "${1:-}" ]; then
		log "Uploading image \"$1\"";
		local FILENAME=""; # commenting to make it work on git-bash "`file $1 | awk -F ':' '{print$1}' | awk -F '/' '{print$(NF)}'`";
		local RETURN_MSG="`curl -s -F img=@$1 -F Filename=$FILENAME $UPLOAD_URL -b PHPSESSID=$SESSION_ID`";
		echo "$1 : $RETURN_MSG" >> css-sprite.log;
		if [ -z "`echo $RETURN_MSG | grep 'Uploaded successfully'`" ]; then
			warn "failed to upload $FILENAME. Log file generated at ./css-sprite.log:";
			warn "  $RETURN_MSG";
			exit 2;
		else
			echo '. ' >> css-sprite.temp;
		fi
	fi
}
uploadFiles() {
	IFS=$'\n';
	local FILE_TO_UPLOAD="";
	echo '' >> css-sprite.temp;
	for a in $FILE_LIST; do
		# sleep 0.1s;
		FILE_TO_UPLOAD="${INPUT_PATH}`echo $a | awk -F '=' '{print$1}'`";
		if [ -f $FILE_TO_UPLOAD ]; then # this is needed because "upload" will run on background and will run as "async"
			TOTAL=$(( $TOTAL + 1 ));
			upload "${INPUT_PATH}`echo $a | awk -F '=' '{print$1}'`" &
		else
			TOTAL_WARNS=$(( $TOTAL_WARNS + 1 ));
			warn "Image \"$FILE_TO_UPLOAD\" was not found. Ignoring and moving on.";
		fi
	done;
	IFS=' ';
}
create() {
	echo `curl -s $CREATE_URL -F output_type=$OUTPUT_TYPE -F jpeg_quality=$JPEG_QUALITY -F padding=$PADDING -b PHPSESSID=$SESSION_ID`;
}
getCSS() {
	local CSS=`echo $1 | awk -F "Generated by" '{print Generated by$2}' | awk -F '"' '{print$1}'`;
	IFS=$'\n';
	for a in $FILE_LIST; do
		local FROM="\\.`echo $a | awk -F '=' '{print$1}' | awk -F '.' '{print$1}'`";
		FROM=${FROM//'_'/'-'};
		local TO=`echo $a | awk -F '=' '{print$2}'`;
		if [ ! -z "$TO" ]; then
			if [ "`echo $TO | awk -F "@mixin" '{print NF-1}'`" = "0" ]; then # sass media-query workaround for extend 
				CSS=`echo $CSS | sed "s/${FROM}\([, \{]\)/${TO}\1/g"`;
			else
				CSS=`echo $CSS | sed "s/${FROM} /${TO}/g" | sed "s/${FROM},//g"`;
			fi
		fi
	done;
	CSS=`echo $CSS | sed "s/url('tmp.png')/url('$(basename $OUTPUT)')/"`; # replace default file name for the new sprite name

	IFS=' ';
	echo ${CSS//'\n'/'^'} | tr '^' '\n'; #monster miguÃ©
}
getSprite() {
	echo "DATA = ${1:-}" >> css-sprite.log;
	SPRITE_URL=`echo ${1:-} | awk -F '"url":"' '{print$2}' | awk -F '"' '{print$1}'`;
	SPRITE_URL=${SPRITE_URL//"\\"/""};
	curl -s -l $SPRITE_URL > "${INPUT_PATH}${OUTPUT}";
}

compressSprite() {
	SPRITE_FILE="${INPUT_PATH}${OUTPUT}";

	# this piece of code were taken from "https://github.com/hhhonzik/tinypng-bash"
	JSON=`curl http://tinypng.org/api/shrink --request POST --data-binary @$SPRITE_FILE 2>/dev/null  `; 

	URL=${JSON/*url\":\"/};
	URL=${URL/\"*/};

	curl $URL > $SPRITE_FILE 2>/dev/null
}

# run
# verify help
help

# create temp file for assynchronous upload
if [ -f 'css-sprite.temp' ]; then
	rm css-sprite.temp;
fi;

# clear log
echo '' > css-sprite.log;

# verify
verifyArgumens
getSessionID

title "Step 1 - Uploading files."
uploadFiles

# check if the files were uploaded successfully (workaround to make each upload asynchounous)
UPLOADED=0;
while [ "$UPLOADED" -lt "$TOTAL" ]; do
	DUMMY=( `cat css-sprite.temp` );
	UPLOADED=${#DUMMY[@]};
	# wait me
done;
rm css-sprite.temp;

# feedback message for upload
if [ $TOTAL_WARNS -gt 0 ]; then
	warn "$TOTAL files successfully loaded, $TOTAL_WARNS file(s) not found.";
else
	success "$TOTAL files successfully uploaded!";
fi

CREATED_DATA="`create`"

title "Step 2 - Loading generated image."
getSprite "$CREATED_DATA";
success "Generated image loaded successfully!";

title "Step 3 - Compressing generated image using TinyPNG.org."
compressSprite
success "Image compressed successfully!";

title "Step 4 - Loading generated CSS."
getCSS "$CREATED_DATA";

success "Generated file at ${INPUT_PATH}${OUTPUT}";
finish; #if any warn were used, the message will be orange "finished with warnings", else it'll be green.

# remove log file (assuming it was successful)
if [ -f 'css-sprite.log' ]; then
	rm css-sprite.log;
fi;